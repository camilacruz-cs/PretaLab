# -*- coding: utf-8 -*-
"""aula1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10yOY20zomFHmhEGfHorom9nx_eTjeS17

### Introdução ao Módulo

No mundo da análise de dados, Python é amplamente reconhecido pela sua vasta gama de bibliotecas que facilitam a manipulação, limpeza, visualização e análise de grandes volumes de dados. No Módulo 4 do curso, vamos explorar algumas das bibliotecas mais usadas para análise de dados, como Pandas, NumPy, Matplotlib, e Seaborn. Cada uma delas oferece ferramentas essenciais para trabalhar com dados de forma eficiente e precisa.

### Objetivos do Módulo:

1. Apresentar as principais bibliotecas de Python para análise de dados.

2. Demonstrar como essas bibliotecas podem ser usadas para manipulação, visualização e análise.

3. Realizar práticas com conjuntos de dados fictícios para entender o fluxo de trabalho na análise de dados.

4. Uso avançado de métodos com as bibliotecas python para análise de dados.

### Pandas

O Pandas é uma das bibliotecas mais populares para análise de dados. Ele oferece estruturas de dados de alto desempenho, como DataFrames, que facilitam a manipulação e a análise de dados tabulares.

**Principais Funcionalidades**:

**1. Estrutura de Dados**: DataFrames: Permitem organizar os dados em formato tabular (linhas e colunas).

**2. Manipulação de Dados**: Como filtragem, seleção, agregação e combinação de dados.

**3. Leitura e Gravação de Dados**:  Suporte para múltiplos formatos de arquivo como CSV, Excel, JSON, SQL, entre outros.
"""

import pandas as pd

# Leitura de um arquivo CSV
df = pd.read_csv('')

# Exibir as 5 primeiras linhas
print(df.head())

# Agrupar os dados por uma coluna e calcular a média
media_por_grupo = df.groupby('').mean()

# Exibir a média por grupo
print(media_por_grupo)

"""### Numpy

O NumPy fornece suporte para arrays e matrizes multidimensionais, além de uma grande coleção de funções matemáticas para operações de alto desempenho em grandes volumes de dados numéricos.

**Principais Funcionalidades:**

**1.Arrays e Matrizes:** Permite trabalhar com arrays de uma ou mais dimensões.

**2.Operações Matemáticas:** Funções de álgebra linear, transformações e operações estatísticas.

**3.Integração com Pandas:** Utilizado em conjunto com Pandas para manipulação numérica.
"""

import numpy as np

# Criar um array NumPy
arr = np.array([])

# Calcular a média dos elementos
media = np.mean(arr)
print("Média:", media)

# Criar uma matriz 3x3
matriz = np.array([[], [], []])

# Somar todos os elementos da matriz
soma = np.sum(matriz)
print("Soma da Matriz:", soma)

"""### Matplotlib

O Matplotlib é a principal biblioteca para visualização de dados em Python. Com ela, é possível criar gráficos estáticos, animados e interativos de maneira flexível.

**Principais Funcionalidades:**

1. **Gráficos** de Linhas, Barras e Dispersão.

2. **Personalização de Gráficos**: Possibilidade de customizar cores, estilos, legendas e rótulos.

3. **Exportação de Gráficos**: Salvar gráficos em formatos como PNG, PDF, SVG, entre outros.
"""

import matplotlib.pyplot as plt

# Dados fictícios
x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 7, 11]

# Criar um gráfico de linhas
plt.plot(x, y, label='Linha de Dados', color='blue', marker='o')

# Adicionar título e rótulos
plt.title('Gráfico de Linhas')
plt.xlabel('X')
plt.ylabel('Y')

# Exibir legenda
plt.legend()

# Mostrar o gráfico
plt.show()

"""### Seaborn

O Seaborn é construído em cima do Matplotlib e oferece uma interface de alto nível para visualizações mais atraentes e informativas. Ele é ideal para plotar gráficos estatísticos com menos esforço.

**Principais Funcionalidades**:

1. **Gráficos de Distribuição**: Como histogramas e gráficos de densidade.

2. **Gráficos de Correlação**: Como mapas de calor (heatmaps) e gráficos de dispersão.

3. **Integração com Pandas**: Facilita a plotagem diretamente de DataFrames.
"""

import seaborn as sns

# Criar um DataFrame com dados fictícios
data = {
    'categoria': ['A', 'B', 'C', 'D'],
    'valores': [10, 20, 30, 40]
}
df = pd.DataFrame(data)

# Criar um gráfico de barras
sns.barplot(x='categoria', y='valores', data=df)

# Mostrar o gráfico
plt.show()

"""### Parte Prática: Aplicando as Bibliotecas em um Projeto

Vamos criar um exemplo prático para demonstrar como usar as bibliotecas de análise de dados para manipular e visualizar dados.

#### Cenário

Uma empresa de telecomunicações está coletando dados sobre o tempo que os clientes passam utilizando seus serviços e a quantidade de dados consumidos. Você foi encarregado de analisar esses dados, realizar algumas agregações e gerar gráficos que ajudem a entender o comportamento dos clientes.

- Qual é a média de dados consumidos por cliente?

- Existe alguma correlação entre o tempo de uso e o volume de dados consumidos?

- Qual gráfico foi mais útil para visualizar a relação entre as variáveis?

##### 1.  Criando o DataFrame com Pandas
"""

import pandas as pd
import numpy as np

# Criar um DataFrame fictício com dados de clientes
dados = {
    'ClienteID': np.arange(1, 11),
    'Tempo_uso': np.random.randint(50, 300, size=10),  # Tempo de uso em minutos
    'Dados_consumidos': np.random.uniform(1, 10, size=10)  # Dados consumidos em GB
}

df = pd.DataFrame(dados)

# Exibir as primeiras linhas
df.head()

"""##### 2. Realizando Análises com Pandas e NumPy"""

# Calcular o tempo médio de uso
tempo_medio = np.mean(df['Tempo_uso'])
print(f"Tempo médio de uso: {tempo_medio:.2f} minutos")

# Calcular a soma dos dados consumidos
dados_totais = np.sum(df['Dados_consumidos'])
print(f"Total de dados consumidos: {dados_totais:.2f} GB")

# Exibir a soma dos dados por cliente
df['Dados_consumidos'].plot(kind='bar', title='Dados Consumidos por Cliente', xlabel='ClienteID', ylabel='GB')
plt.show()

"""##### 3. Visualização de Dados com Matplotlib e Seaborn"""

import matplotlib.pyplot as plt
import seaborn as sns

# Gráfico de Dispersão: Tempo de Uso vs. Dados Consumidos
plt.figure(figsize=(8, 6))
plt.scatter(df['Tempo_uso'], df['Dados_consumidos'], color='blue', label='Clientes')

# Adicionar rótulos e título
plt.title('Tempo de Uso vs. Dados Consumidos')
plt.xlabel('Tempo de Uso (minutos)')
plt.ylabel('Dados Consumidos (GB)')
plt.legend()

# Mostrar o gráfico
plt.show()

# Gráfico de calor com Seaborn para correlação entre variáveis
plt.figure(figsize=(6,4))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlação entre Variáveis')
plt.show()